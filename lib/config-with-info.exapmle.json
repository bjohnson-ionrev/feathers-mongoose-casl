{
  // Add this to your config file
  "serverUrl": "http://localhost:3030",
  "port": 3030,
  "mongodb": "mongodb+srv.....",
  "public": "../public/",
  "s3": {
    "bucket": "bucket....",
    "accessKeyId": "accessKeyId....",
    "secretAccessKey": "secretAccessKey....",
    "signedUrlExpires" : 900
  },
  "google-cloud": {
    "projectId": "agora-real",
    "bucket": "MyCompany-dev",
    "keyFilename": "../src/secret-files/google-key.json", /* The place you save your google json file*/
    "signedUrlExpires" : 900
  },
  "mailgun": {
    "apiKey": "apiKey",
    "domain": "mg.MyCompany.com"
  },
  "sendgrid": {
    "apiKey": "apiKey"
  },
  "twilio": {
    "sid": "XXXXXXXX",
    "token": "XXXXXXXX",
    "number": "XXXXXXXX"
  },
  "feathers-mongoose-casl": {
    "pickMeReadFields": [], /* Array of field that user can see ['email'] or can't see ['-verifyEmail']*/
    "pickMeUpdateFields": [] /* Array of field that user can update ['email'] or can't update ['-verifyEmail']*/,
    "mailer": {
      "service": "", /* The service through which he was sent was emails, can be 'sendgrid' or 'mailgun'*/
      "sendgrid-authentication-emails-templates": {  /* Relevant only to send grid, set templates id's */
        "reset-password": null,
        "Identity-change": null,
        "password-change": null,
        "verify-email": null,
        "password-was-reset": null,
        "email-verified": null
      }
    },
    "defaultRules": [ /* Array of default rules to your app */
      {
        "userContext": {"email": "doron.nahum+2@gmail.com"},
        "actions": ["manage"],
        "subject": ["dashboard","users","user-abilities","rules","files"]
      },
      {
        "name": "allow-admin-dashboard",
        "description": "allowed admin users access dashboard, and manage rules and users",
        "actions": ["manage"],
        "subject": ["dashboard","users","get-file"],
        "roles": ["admin"]
      },
      {
        "name": "allow-sys-admin-rules",
        "description": "allowed admin users access dashboard, and manage rules and users",
        "actions": ["manage"],
        "subject": ["rules","user-abilities"],
        "roles": ["sys-admin"]
      }
    ],
    "uploads": {
      "services": { /* Uploads services to allow */
        "s3": false,
        "local-private": true,
        "local-public": true,
        "google-cloud": false
      },
      "defaultFileService": "local-private", /* The service to use in the built in File service*/
      "blockDeleteDocumentWhenDeleteFileFailed": false, /* Set true if you want to block DB document delete if assign file deleting is failed */
      "blockUpdateDocumentWhenReplaceFileFailed": false /* Set true if you want to block DB document updating if assign file deleting is failed */
    },
    "verifyEmail": {
      "enabled": true, /* Set to false if you want to let the user login withot validate is emails */
      "fromEmail": "info@MyCompany.com",
      "helpEmail": "help@MyCompany.com"
    },
    "clientUrl" : "http://localhost:8080",
    "changePasswordClientUrl": null,
    "clientSigninUrl" : "http://localhost:8080/signin", /* The url to redirect after email is verified*/
    "srcFolder": "../src/",
    "privateFolder": "../private-files", /* The place to save private-files when you use upload local-private*/
    "rulesCache": {
      "enabled": true, /* true is recommended, we save rules in the cache and we refresh the cache when DB rules are updating */
      "local-catch": true,
      "local-config": {
        "max": 400,
        "maxAge": 3600000
      }
    },
    "usersCache": {
      "enabled": true, /* true is recommended, we save users in the cache and we refresh the cache when DB users are updating */
      "local-catch": true,
      "local-config": {
        "max": 100,
        "maxAge": 3600000
      }
    },
    "privateFilesAbilityCache": {
    "enabled": true,  /* true is recommended, we save user abilities to see the private file in the cache */
    "local-catch": true,
    "local-config": {
      "max": 100,
      "maxAge": 3600000
    }
    }
  }
}